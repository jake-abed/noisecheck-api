// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: releases.sql

package database

import (
	"context"
)

const createRelease = `-- name: CreateRelease :one
INSERT INTO releases (
  name,
  user_id,
  imgUrl,
  is_public
) VALUES (
  ?,
  ?,
  ?,
  ?
)
RETURNING id, name, user_id, imgurl, song_count, is_public, created_at, updated_at
`

type CreateReleaseParams struct {
	Name     string
	UserID   string
	Imgurl   string
	IsPublic bool
}

func (q *Queries) CreateRelease(ctx context.Context, arg CreateReleaseParams) (Release, error) {
	row := q.db.QueryRowContext(ctx, createRelease,
		arg.Name,
		arg.UserID,
		arg.Imgurl,
		arg.IsPublic,
	)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Imgurl,
		&i.SongCount,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteReleaseById = `-- name: DeleteReleaseById :exec
DELETE FROM releases WHERE id = ?
`

func (q *Queries) DeleteReleaseById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReleaseById, id)
	return err
}

const getAllPublicReleases = `-- name: GetAllPublicReleases :many
SELECT id, name, user_id, imgurl, song_count, is_public, created_at, updated_at FROM releases WHERE is_public = TRUE
`

func (q *Queries) GetAllPublicReleases(ctx context.Context) ([]Release, error) {
	rows, err := q.db.QueryContext(ctx, getAllPublicReleases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Release
	for rows.Next() {
		var i Release
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Imgurl,
			&i.SongCount,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPublicReleasesByUser = `-- name: GetAllPublicReleasesByUser :many
SELECT releases.id, releases.name, releases.user_id, releases.imgurl, releases.song_count, releases.is_public, releases.created_at, releases.updated_at, users.username FROM releases
  INNER JOIN users ON users.id = releases.user_id
  WHERE is_public = TRUE AND user_id = ?
  ORDER BY releases.created_at DESC
  LIMIT 20 OFFSET ?
`

type GetAllPublicReleasesByUserParams struct {
	UserID string
	Offset int64
}

type GetAllPublicReleasesByUserRow struct {
	ID        int64
	Name      string
	UserID    string
	Imgurl    string
	SongCount int64
	IsPublic  bool
	CreatedAt string
	UpdatedAt string
	Username  string
}

func (q *Queries) GetAllPublicReleasesByUser(ctx context.Context, arg GetAllPublicReleasesByUserParams) ([]GetAllPublicReleasesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPublicReleasesByUser, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllPublicReleasesByUserRow
	for rows.Next() {
		var i GetAllPublicReleasesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Imgurl,
			&i.SongCount,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllReleasesByUser = `-- name: GetAllReleasesByUser :many
SELECT releases.id, releases.name, releases.user_id, releases.imgurl, releases.song_count, releases.is_public, releases.created_at, releases.updated_at, users.username FROM releases
  INNER JOIN users ON users.id = releases.user_id
  WHERE user_id = ?
  ORDER BY releases.created_at DESC
  LIMIT 20 OFFSET ?
`

type GetAllReleasesByUserParams struct {
	UserID string
	Offset int64
}

type GetAllReleasesByUserRow struct {
	ID        int64
	Name      string
	UserID    string
	Imgurl    string
	SongCount int64
	IsPublic  bool
	CreatedAt string
	UpdatedAt string
	Username  string
}

func (q *Queries) GetAllReleasesByUser(ctx context.Context, arg GetAllReleasesByUserParams) ([]GetAllReleasesByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllReleasesByUser, arg.UserID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllReleasesByUserRow
	for rows.Next() {
		var i GetAllReleasesByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Imgurl,
			&i.SongCount,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicReleases = `-- name: GetPublicReleases :many
SELECT releases.id, releases.name, releases.user_id, releases.imgurl, releases.song_count, releases.is_public, releases.created_at, releases.updated_at, users.username FROM releases
  INNER JOIN users ON users.id = releases.user_id
  WHERE is_public = TRUE
  ORDER BY releases.created_at DESC
  LIMIT 20 OFFSET ?
`

type GetPublicReleasesRow struct {
	ID        int64
	Name      string
	UserID    string
	Imgurl    string
	SongCount int64
	IsPublic  bool
	CreatedAt string
	UpdatedAt string
	Username  string
}

func (q *Queries) GetPublicReleases(ctx context.Context, offset int64) ([]GetPublicReleasesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPublicReleases, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPublicReleasesRow
	for rows.Next() {
		var i GetPublicReleasesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UserID,
			&i.Imgurl,
			&i.SongCount,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReleaseById = `-- name: GetReleaseById :one
SELECT id, name, user_id, imgurl, song_count, is_public, created_at, updated_at FROM releases WHERE id = ?
`

func (q *Queries) GetReleaseById(ctx context.Context, id int64) (Release, error) {
	row := q.db.QueryRowContext(ctx, getReleaseById, id)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Imgurl,
		&i.SongCount,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRelease = `-- name: UpdateRelease :one
UPDATE releases
  SET name = ?,
    imgUrl = ?,
    is_public = ?,
    updated_at = CURRENT_TIMESTAMP
  WHERE id = ?
RETURNING id, name, user_id, imgurl, song_count, is_public, created_at, updated_at
`

type UpdateReleaseParams struct {
	Name     string
	Imgurl   string
	IsPublic bool
	ID       int64
}

func (q *Queries) UpdateRelease(ctx context.Context, arg UpdateReleaseParams) (Release, error) {
	row := q.db.QueryRowContext(ctx, updateRelease,
		arg.Name,
		arg.Imgurl,
		arg.IsPublic,
		arg.ID,
	)
	var i Release
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UserID,
		&i.Imgurl,
		&i.SongCount,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
